# -*- coding: utf-8 -*-
"""Time-Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/191PAyfSQ6RwCSfvA2zd9RI4KNW9enxo7

Steven Jonathan
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout

df_Test = pd.read_csv('/content/DailyDelhiClimateTest.csv')
df_Train = pd.read_csv('/content/DailyDelhiClimateTrain.csv')

df_Train.head()

df_Test.head()

df_Train.isnull().sum()

df_Test.isnull().sum()

date = df_Train['date'].values
wind_speed  = df_Train['wind_speed'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(date, wind_speed)
plt.title('Temperature average',
          fontsize=20);

from sklearn.model_selection import train_test_split

x_train, x_test , y_train, y_test  = train_test_split(wind_speed, date, test_size=0.2)
print("Jumlah Dataset Train: ", len(x_train))
print("Jumlah Dataset Test: ", len(x_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_train, window_size=64, batch_size=200, shuffle_buffer=1000)
val_set = windowed_dataset(x_test, window_size=64, batch_size=200, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
    Bidirectional(LSTM(60, return_sequences=True)),
    Bidirectional(LSTM(60)),
    Dense(30, activation="relu"),
    Dense(10, activation="relu"),
    Dense(1),
])

Mae = (df['wind_speed'].max() - df['wind_speed'].min()) * 10/100
print(Mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<1.79 and logs.get('val_mae')<1.79):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=100, validation_data = val_set, callbacks=[callbacks])

# Plot Accuracy
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

# Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()